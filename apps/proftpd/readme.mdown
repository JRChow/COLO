## dkftpbench
### Introduction
dkftpbench is an FTP benchmark program inspired by SPECweb99. The result of the benchmark is a number-of-simultaneous-users rating; after running the benchmark properly, you have a good idea how many simultaneous dialup clients a server can support. The target bandwidth per client is set at 28.8 kilobits/second to model dialup users; this is important for servers on the real Internet, which often serve thousands of clients on only 10 MBits/sec of bandwidth.

The final result of the benchmark is "the number of simultaneous 28.8 kilobits/second dialup users". To estimate this number, the benchmark starts up a new simulated user as soon as the last one has finished connecting. It stops increasing the number of users when one fails to connect, fails to maintain the desired bandwidth, or the limit specified by the -n option is reached. It runs the simulated users until the amount of time specified by the -t option has elapsed since the last simulated user birth or death; the final score is the number of users still alive at the end.

### Example
```
-hHOSTNAME host name of ftp server
-P# port number of ftp server
-n# number of users
-c# target number of simultaneous connection attempts
-k# Start next connection when: 1=immediately, 2=after prev connect complete (default 2)
-t# length of run (in seconds)
-uUSERNAME user name
-pPASSWORD user password
-fFILENAME file to fetch
-v# set verbosity (0=none, 1=some, 2=lots)
```

### Reporting Guidelines
I invite people to run this on their FTP servers and report the results by email. If you want to do this, use the following command to generate test data files:
```
make data
```
This will generate x10k.dat, x100k.dat, and x1000k.dat. Run the commands
```
time dkftpbench -h200.201.202.203 -utestuser -ptestpass -n500 -t600 -fx10k.dat
```
and
```
time dkftpbench -h200.201.202.203 -utestuser -ptestpass -n500 -t600 -fx1000k.dat
```
on a different machine from the ftp server (substituting your server's IP address, username, and password).

## ProFTPD howto
### ProFTPD Virtual Users
**Frequently Asked Questions**

Question: What makes a user "virtual", then?<br>
Answer: A virtual user is, quite simply, a user that is *not* defined in the system `/etc/passwd` file.

Question: If virtual users are not defined in the system `/etc/passwd` file, then where *are* they defined?<br>
Answer: There are several other locations where user information can be stored, *e.g.* `AuthUserFiles`. Note that virtual users are **not** defined in the `proftpd.conf` file directly.

One of the simplest virtual user authentication mechanisms is the AuthUserFile, which is a flat text file in the same format as the system `/etc/passwd` file.

Once you have created your `AuthUserFile` and `AuthGroupFile` with the `ftpasswd` tool, you configure your `proftpd` to use those files by adding the following directives to your `proftpd.conf`:
```
  AuthUserFile /path/to/ftpd.passwd
  AuthGroupFile /path/to/ftpd.group
```
The `ftpasswd` tool is a Perl script, distributed with the ProFTPD source code, under the `contrib/` directory.

**Important**: `proftpd` will use all authentication mechanisms **by default**. This is why a user that does not appear in an `AuthUserFile`, but **is** defined in the system `/etc/passwd file`, can login by default. 

### `DefaultRoot`
**Restricting Users' Directories**

One of the most common questions for new users of ProFTPD is "How do I restrict my users to only certain directories?" or, phrased another way, "How can I put my users in a chroot jail?" The answer is ProFTPD's `DefaultRoot` configuration directive, which accomplishes this functionality by using the `chroot(2)` function.

### ProFTPD and the ScoreboardFile
**What is the Scoreboard?**

The `ScoreboardFile` is used by `proftpd` for tracking information for each current FTP session.

**What's in the Scoreboard?**

What types of information about each session is tracked in the scoreboard? What else is recorded in the scoreboard?

The `ScoreboardFile` records the following information about the parent/daemon `proftpd` process:
- scoreboard file format identifier
- daemon PID
- daemon uptime
- daemon version 

and for each session, the `ScoreboardFile` records:
- session PID
- session protocol (*e.g.* "ftp", "ftps", "sftp")
- session UID
- session GID
- session user name
- session server IP address/port
- session virtual host name
- session client IP address, DNS name
- session class
- time since session started

### *ProFTPD Logging*
**Frequently Asked Questions**

Question: I see:
```
  wtmp /var/log/wtmp: No such file or directory
```
in my logs. What is `WtmpLog` logging? The description in the documentation is quite vague.<br>
Answer: The `wtmp` logging support is **not** specific to `proftpd`, and instead is a more general Unix facility; this is why the ProFTPD documentation does not cover it in great detail. To learn more about `wtmp` (or any of its other incarnations: `wtmpx`, `utmp`, `utmpx`), please find their related man pages.

### ProFTPD Supported FTP Commands
Supported FTP Commands
- STOR
  Short for **STOR**e, this command is used by the client to tell the the server that the client will be uploading data for a file to stored on the server using the filename given. On many FTP clients, this is implemented using the client-specific "put" command.
- STOU
  Short for **STO**re **U**unique, it requests that the file being stored on the server be given a unique filename. The server chooses the unique name for the stored file, and reports the name chosen back to the client.

### Configuring `<Limits>`
ProFTPD's `<Limit>` configuration sections allow for powerful fine-grained control over who is allowed to use which FTP commands.

** Examples**

Here are examples to help illustrate the use of `<Limit>`. First, a common configuration: an upload-only directory.
```
  <Directory /path/to/uploads>
    <Limit ALL>
      DenyAll
    </Limit>

    <Limit CDUP CWD PWD XCWD XCUP>
      AllowAll
    </Limit>

    <Limit STOR STOU>
      AllowAll
    </Limit>
  </Directory>
```
The first `<Limit ALL>` section blocks use of all FTP commands within the `/path/to/uploads` directory. Having denied use of all commands, we then proceed to define which commands can be used. The `CDUP` and `CWD` commands (and their X variants) should be allowed so that clients can change into and out of the directory. Next, `STOR` and `STOU` are allowed, so that clients can actually upload files into the directory (assuming that the filesystem permissions allow for the client to write files in the directory as well).

### Connection ACLs
Many sites running `proftpd` have the need to limit/reject connections from known bad addresses, or to accept connections only from known good addresses. ProFTPD supports several different mechanisms for implementing FTP connection ACLs.

**<Limit LOGIN>, and Whitelists versus Blacklists**

The easiest way of accepting/rejecting connections is to use ProFTPD's `<Limit>` syntax, particularly `<Limit LOGIN>`.

For example, you can simply reject all connections to your proftpd instance by using:
```
  <Limit LOGIN>
    DenyAll
  </Limit>
```
A more practical example would look like:
```
  <Limit LOGIN>
    # These are trusted addresses
    Allow from 1.2.3.4 5.6.7.8
    Allow from trusted-domain.com

    # Everyone else is denied
    DenyAll
  </Limit>
```
The above configuration demonstrates the concept of a *whitelist*: known trusted (*i.e.* "white") addresses are explicitly listed and allowed, and all others are denied.
